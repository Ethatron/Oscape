/* Version: MPL 1.1
 *
 * "The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 *
 * The Original Code is The Amiga Research OS, short AROS.
 *
 * Copyright (C) 1998-2001 AROS - The Amiga Research OS
 * Copyright (C) 2004-2011 Ethatron <niels@paradice-insight.us>.
 * All Rights Reserved.
 */

#ifndef	MEMORY_DEFINES_HPP
#define	MEMORY_DEFINES_HPP

#include <stdlib.h>

/* Information generated by machine.c */
#define AROS_STACK_GROWS_DOWNWARDS 1 /* Stack direction */
#define AROS_BIG_ENDIAN 	   0 /* Big or little endian */
#define AROS_SIZEOFULONG	   4 /* Size of an ULONG */
#define AROS_WORDALIGN		   2 /* Alignment for WORD */
#define AROS_LONGALIGN		   4 /* Alignment for LONG */
#define AROS_PTRALIGN		   4 /* Alignment for PTR */
#define AROS_IPTRALIGN		   4 /* Alignment for IPTR */
#define AROS_DOUBLEALIGN	   4 /* Alignment for double */
#define AROS_WORSTALIGN 	   4 /* Worst case alignment */

/* Check if an int is a power of two */
#define AROS_IS_POWER_OF_2(l)	(((l) & -(l)) == (l))

/* Round down <x> to a multiple of <r>. <r> must be a power of two */
#define AROS_ROUNDDOWN2(x,r)	((x) & ~((r) - 1))

/* Round up <x> to a multiple of <r>. <r> must be a power of two */
#define AROS_ROUNDUP2(x,r)	(((x) + ((r) - 1)) &  ~((r) - 1))

#define RTPOTx4(a)		((a) > 2 ? 4 : (a) > 1 ? 2 : 1)
#define RTPOTx10(a)		((a) >=       4 ?     RTPOTx4(((a) +      3) /       4) *       4 :     RTPOTx4(a))
#define RTPOTx100(a)		((a) >=    0x10 ?    RTPOTx10(((a) +    0xf) /    0x10) *    0x10 :    RTPOTx10(a))
#define RTPOTx10000(a)		((a) >=   0x100 ?   RTPOTx100(((a) +   0xff) /   0x100) *   0x100 :   RTPOTx100(a))
#define RTPOTx100000000(a)      ((a) >= 0x10000 ? RTPOTx10000(((a) + 0xffff) / 0x10000) * 0x10000 : RTPOTx10000(a))

#define ROUNDUP_TO_POWER_OF_TWO(a)      RTPOTx100(a)

#endif	//MEMORY_DEFINES_HPP
